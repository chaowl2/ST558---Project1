---
title: "Project1_Group14"
format: html
editor: visual
---

## Query API Function

The following function is to query the Public Use Microdata Sample (PUMS) Census API.

But first, we need to define the values for codes in the JWAP and JWDP variables.

```{r}
URL_jwap_code <- "https://api.census.gov/data/2022/acs/acs1/pums/variables/JWAP.json"
jwap_code_returns <- httr::GET(URL_jwap_code)
parsed_jwap_code <- jsonlite::fromJSON(rawToChar(jwap_code_returns$content))
jwap_code <- as.list(parsed_jwap_code$values$item)

URL_jwdp_code <- "https://api.census.gov/data/2022/acs/acs1/pums/variables/JWDP.json"
jwdp_code_returns <- httr::GET(URL_jwdp_code)
parsed_jwdp_code <- jsonlite::fromJSON(rawToChar(jwdp_code_returns$content))
jwdp_code <- as.list(parsed_jwdp_code$values$item)

```

Features of the function include:

-   Allows user to choose the year of survey (2022 as default).

-   Allows the user to specify the numeric variables (AGEP and PWGTP as default, with PWGTP always being returned).

-   Allows the user to specify the categorical variables (SEX as default).

-   Allows the user to specify the geography level (state, division, region with state being the default) and the geography code (37 is the current default).

-   Checks that a valid value was give for the year (between 2010 and 2022).

-   Checks that the numeric and categorical variables specified are in the list of variables of interest.

-   Checks that a valid geography level was given.

```{r}
library(DBI)
library(dplyr)
library(jsonlite)
library(lubridate)

query_census_api <- function(year = 2022, 
                             num_var = "AGEP", 
                             cat_var = "SEX", 
                             geography = "state", 
                             geo_code = "37") {
  if(year < 2010 | year > 2023) {stop("Invalid Year")}
  if(!all(num_var %in% c("AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP"))) 
    {stop("Invalid Numeric Variable")}
  if(!all(cat_var %in% c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX"))) 
    {stop("Invalid Categorical Variable")}
  if(!(geography %in% c("state", "division", "region"))) 
    {stop("Invalid Geography Level")}
  url_census <- paste0("https://api.census.gov/data/", year, 
                       "/acs/acs1/pums?get=AGEP,GASP,GRPIP,JWAP,JWDP,JWMNP,PWGTP,SEX,FER,HHL,HISPEED,JWTRNS,SCH,SCHL&for=", geography, ":", geo_code) 
  census_stats <- httr::GET(url_census)
  parsed_census <- fromJSON(rawToChar(census_stats$content))
  census_data <- as_tibble(parsed_census)
  census_data <- `colnames<-`(census_data, census_data[1,])
  census_data <- census_data[-1,]
  census_data |>
    transform(AGEP = as.numeric(AGEP), GASP = as.numeric(GASP), GRPIP = 
              as.numeric(GRPIP), JWMNP = as.numeric(JWMNP), 
              JWAP = as.character(jwap_code[JWAP]), JWDP = 
              as.character(jwdp_code[JWDP]))|>
    select(PWGTP, num_var, cat_var, geography) 
}
```

Test function.

```{r}
query_census_api(num_var = c("AGEP", "GASP", "JWAP", "JWDP", "JWMNP"))
```

The following function is to use the `query_census_api` function to query the Census API for multiple survey years.

```{r}
query_multiyear_census <- function(census_years, 
                                   num_var = "AGEP",
                                   cat_var = "SEX", 
                                   geography = "state",
                                   geo_code = "37") {
  for (i in seq_along(census_years)){
    query_census_api(year = census_years[i])
  }
  
}

query_multiyear_census(census_years = c("2019", "2022"))
```
